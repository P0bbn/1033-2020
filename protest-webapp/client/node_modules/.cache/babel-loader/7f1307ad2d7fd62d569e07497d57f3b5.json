{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Puneet\\\\Documents\\\\Penn MCIT\\\\Fall 2020\\\\550\\\\Project\\\\repo\\\\protest-webapp\\\\client\\\\src\\\\components\\\\CountryChart.js\";\nimport React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Line } from 'react-chartjs-2';\nimport Chart from 'chart.js';\nvar data = {\n  labels: [],\n  datasets: [{\n    label: 'All Event Types',\n    fill: false,\n    lineTension: 0.1,\n    backgroundColor: 'rgba(75,192,192,0.4)',\n    borderColor: 'rgba(75,192,192,1)',\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0.0,\n    borderJoinStyle: 'miter',\n    pointBorderColor: 'rgba(75,192,192,1)',\n    pointBackgroundColor: '#fff',\n    pointBorderWidth: 1,\n    pointHoverRadius: 5,\n    pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n    pointHoverBorderColor: 'rgba(220,220,220,1)',\n    pointHoverBorderWidth: 2,\n    pointRadius: 1,\n    pointHitRadius: 10,\n    data: []\n  }]\n};\nexport default class CountryChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.chartRef = React.createRef();\n    this.state = {\n      labels: props.chartLabel,\n      dataPoints: props.chartData\n    };\n    data.datasets[0].data = this.state.dataPoints;\n    data.labels = this.state.labels;\n    this.componentDidUpdate = this.componentDidUpdate.bind(this);\n  }\n\n  componentDidUpdate(prevProps, nextProps) {\n    if (prevProps !== this.props) {\n      console.log(nextProps);\n      this.setState({\n        labels: this.props.chartLabel,\n        dataPoints: this.props.chartData\n      });\n      data.datasets[0].data = this.state.dataPoints;\n      data.labels = this.state.labels; // this.update();\n    }\n  } // componentWillReceiveProps(nextProps, nextContext) {\n  //     // update chart according to prop change\n  //     this.state.chart.data.datasets.forEach((dataset) => {\n  //       dataset.data.push(nextProps.chartData);\n  //     });\n  //     this.update();\n  // }\n  // function updateChart(newlabel, newData) {\n  //     this.setState({\n  //         labels: newlabel,\n  //         dataPoints: newData\n  //     });\n  //     data.datasets[0].data = this.state.dataPoints;\n  //     data.labels = this.state.labels;\n  // }\n\n\n  render() {\n    console.log(this.props.chartData);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }, \"Number of Protests over the Year\"), /*#__PURE__*/React.createElement(Line, {\n      ref: \"chart\",\n      data: data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }\n    }));\n  } // handleChange = event => {\n  //     this.setState({ \n  //       labels: this.props.chartLabel,\n  //       dataPoints: this.props.chartData, });\n  //     data.datasets[0].data = this.state.dataPoints;\n  //     data.labels = this.state.labels;\n  // };\n\n\n  componentDidMount() {\n    //let theChart = new Chart();\n    data.datasets[0].data = this.props.chartData;\n    const {\n      datasets\n    } = this.refs.chart.chartInstance.data;\n    console.log(datasets[0].data);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Puneet/Documents/Penn MCIT/Fall 2020/550/Project/repo/protest-webapp/client/src/components/CountryChart.js"],"names":["React","Line","Chart","data","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","CountryChart","Component","constructor","props","chartRef","createRef","state","chartLabel","dataPoints","chartData","componentDidUpdate","bind","prevProps","nextProps","console","log","setState","render","componentDidMount","refs","chart","chartInstance"],"mappings":"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","sourcesContent":["import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Line} from 'react-chartjs-2';\nimport Chart from 'chart.js'\n\n\nvar data = {\n  labels: [],\n  datasets: [\n    {\n      label: 'All Event Types',\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: 'rgba(75,192,192,0.4)',\n      borderColor: 'rgba(75,192,192,1)',\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: 'rgba(75,192,192,1)',\n      pointBackgroundColor: '#fff',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: []\n    }\n  ]\n};\n\nexport default class CountryChart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.chartRef = React.createRef();\n        this.state = {\n            labels: props.chartLabel,\n            dataPoints: props.chartData\n        }\n        data.datasets[0].data = this.state.dataPoints;\n        data.labels = this.state.labels;\n\n        this.componentDidUpdate = this.componentDidUpdate.bind(this);\n\n    }\n    componentDidUpdate(prevProps, nextProps) {\n        if(prevProps !== this.props){\n            console.log(nextProps);\n            this.setState({\n                labels: this.props.chartLabel,\n                dataPoints: this.props.chartData\n            });\n            data.datasets[0].data = this.state.dataPoints;\n            data.labels = this.state.labels\n            // this.update();\n        }\n\n    }\n\n\n    // componentWillReceiveProps(nextProps, nextContext) {\n    //     // update chart according to prop change\n    //     this.state.chart.data.datasets.forEach((dataset) => {\n    //       dataset.data.push(nextProps.chartData);\n    //     });\n    //     this.update();\n    // }\n\n    // function updateChart(newlabel, newData) {\n    //     this.setState({\n    //         labels: newlabel,\n    //         dataPoints: newData\n    //     });\n    //     data.datasets[0].data = this.state.dataPoints;\n    //     data.labels = this.state.labels;\n\n    // }\n    render() {\n        console.log(this.props.chartData);\n    return (\n        <div>\n        <h2>Number of Protests over the Year</h2>\n            <Line ref=\"chart\" data={data}/>\n        </div>\n    );\n    }\n\n    // handleChange = event => {\n    //     this.setState({ \n    //       labels: this.props.chartLabel,\n    //       dataPoints: this.props.chartData, });\n    //     data.datasets[0].data = this.state.dataPoints;\n    //     data.labels = this.state.labels;\n    // };\n\n    componentDidMount() {\n        //let theChart = new Chart();\n        data.datasets[0].data = this.props.chartData\n        const { datasets } = this.refs.chart.chartInstance.data\n        console.log(datasets[0].data);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}