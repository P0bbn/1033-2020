{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Puneet\\\\Documents\\\\Penn MCIT\\\\Fall 2020\\\\550\\\\Project\\\\repo\\\\protest-webapp\\\\client\\\\src\\\\components\\\\Home.js\";\nimport React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../style/Dashboard.css';\nimport PageNavbar from './PageNavbar';\nimport Query2Row from './Query2Row';\nimport Query3Row from './Query3Row';\nimport CountryChart from './CountryChart';\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props); // The state maintained by this React Component. This component maintains the list of genres,\n    // and a list of movies for a specified genre.\n\n    this.state = {\n      buttonList: [],\n      queryResults: [],\n      tableHeader: [],\n      tableTitle: [],\n      showJumbo: false,\n      chartData: [],\n      chartLabel: [],\n      chartFull: []\n    };\n    this.showQuery2 = this.showQuery2.bind(this);\n    this.showQuery3 = this.showQuery3.bind(this);\n    this.showQuery5 = this.showQuery5.bind(this); //this.showMovies = this.showMovies.bind(this);\n  } // React function that is called when the page load.\n\n\n  componentDidMount() {\n    // Send an HTTP request to the server.\n    let buttons = [/*#__PURE__*/React.createElement(\"button\", {\n      class: \"buttons\",\n      id: this.props.id,\n      onClick: () => this.showQuery2(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 7\n      }\n    }, \"Protests per State\"), /*#__PURE__*/React.createElement(\"button\", {\n      class: \"buttons\",\n      id: this.props.id,\n      onClick: () => this.showQuery3(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }\n    }, \"Protests by Type\")];\n    this.setState({\n      buttonList: buttons\n    });\n    this.showQuery5();\n    /*\n    fetch(\"http://localhost:8081/genres/query2\",\n    {\n      method: 'GET' // The type of HTTP request.\n    }).then(res => {\n      // Convert the response data to a JSON.\n      return res.json();\n    }, err => {\n      // Print the error if there is one.\n      console.log(err);\n    }).then(genreList => {\n      if (!genreList) return;\n      // Map each genreObj in genreList to an HTML element:\n      // A button which triggers the showMovies function for each genre.\n      let query2Divs = genreList.map((query2_Obj, i) =>\n      <Query2Row state={query2_Obj.state} population={query2_Obj.population} peaceful={query2_Obj.peaceful} non_peaceful={query2_Obj.non_peaceful} peaceful_per_100K={query2_Obj.peaceful_per_100K} non_peaceful_per_100K={query2_Obj.non_peaceful_per_100K}/>\n      );\n       \n      // Set the state of the genres list to the value returned by the HTTP response from the server.\n      this.setState({\n        query2: query2Divs\n      });\n    }, err => {\n      // Print the error if there is one.\n      console.log(err);\n    });\n    */\n  }\n\n  showQuery2() {\n    fetch(\"http://localhost:8081/country/query2\", {\n      method: 'GET' // The type of HTTP request.\n\n    }).then(res => {\n      // Convert the response data to a JSON.\n      return res.json();\n    }, err => {\n      // Print the error if there is one.\n      console.log(err);\n    }).then(genreList => {\n      if (!genreList) return; // Map each genreObj in genreList to an HTML element:\n      // A button which triggers the showMovies function for each genre.\n\n      let query2Divs = genreList.map((query2_Obj, i) => /*#__PURE__*/React.createElement(Query2Row, {\n        state: query2_Obj.state == 'DISTRICT OF COLUMBIA' ? 'D.C' : query2_Obj.state,\n        population: query2_Obj.population == null ? '0' : query2_Obj.population,\n        peaceful: query2_Obj.peaceful == null ? '0' : query2_Obj.peaceful,\n        non_peaceful: query2_Obj.non_peaceful == null ? '0' : query2_Obj.non_peaceful,\n        peaceful_per_100K: query2_Obj.peaceful_per_100K == null ? '0' : query2_Obj.peaceful_per_100K,\n        non_peaceful_per_100K: query2_Obj.non_peaceful_per_100K == null ? '0' : query2_Obj.non_peaceful_per_100K,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 7\n        }\n      }));\n      let header = [/*#__PURE__*/React.createElement(\"div\", {\n        className: \"query-header table-responsive-md\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 35\n        }\n      }, \"State\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 35\n        }\n      }, \"Population\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 35\n        }\n      }, \"# Peaceful Protests\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 35\n        }\n      }, \"# Violent Protests\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 35\n        }\n      }, \"# Peaceful per 100K\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 35\n        }\n      }, \"# Violent per 100K\")))];\n      let title = [/*#__PURE__*/React.createElement(\"div\", {\n        className: \"header text-center display-5 font-weight-bold\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 9\n        }\n      }, \"Number of Peaceful and Violent Protests in each State in 2020\")]; // Set the state of the genres list to the value returned by the HTTP response from the server.\n\n      this.setState({\n        queryResults: query2Divs,\n        tableTitle: title,\n        tableHeader: header,\n        showJumbo: true\n      });\n    }, err => {\n      // Print the error if there is one.\n      console.log(err);\n    });\n  }\n\n  showQuery3() {\n    fetch(\"http://localhost:8081/country/query3\", {\n      method: 'GET' // The type of HTTP request.\n\n    }).then(res => {\n      // Convert the response data to a JSON.\n      return res.json();\n    }, err => {\n      // Print the error if there is one.\n      console.log(err);\n    }).then(query3List => {\n      if (!query3List) return; // Map each genreObj in genreList to an HTML element:\n      // A button which triggers the showMovies function for each genre.\n\n      let query3Divs = query3List.map((query3_Obj, i) => /*#__PURE__*/React.createElement(Query3Row, {\n        event: query3_Obj.event_type,\n        sub_event: query3_Obj.sub_event_type,\n        count: query3_Obj.count,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 7\n        }\n      }));\n      let title = [/*#__PURE__*/React.createElement(\"div\", {\n        className: \"text-center display-5 font-weight-bold \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 9\n        }\n      }, \"Types and Count of Different Protests throughout the US\")];\n      let header = [/*#__PURE__*/React.createElement(\"div\", {\n        className: \"query-header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 35\n        }\n      }, \"Event Type\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 35\n        }\n      }, \"Subtype\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 35\n        }\n      }, \"Amount\")))]; // Set the state of the genres list to the value returned by the HTTP response from the server.\n\n      this.setState({\n        queryResults: query3Divs,\n        tableTitle: title,\n        tableHeader: header,\n        showJumbo: true\n      });\n    }, err => {\n      // Print the error if there is one.\n      console.log(err);\n    });\n  }\n\n  showQuery5() {\n    fetch(\"http://localhost:8081/query5\", //change to appropriate URL based on index.js in server folder\n    {\n      method: 'GET' // The type of HTTP request.\n\n    }).then(res => {\n      // Convert the response data to a JSON.\n      return res.json();\n    }, err => {\n      // Print the error if there is one.\n      console.log(err);\n    }).then(chartList => {\n      if (!chartList) return;\n      let labelb = chartList.map((query_Obj, i) => query_Obj.event_date.substring(5, 10));\n      let datab = chartList.map((query_Obj, i) => query_Obj.num_events);\n      let chart = [/*#__PURE__*/React.createElement(CountryChart, {\n        chartData: datab,\n        chartLabel: labelb,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 20\n        }\n      })]; // let data = [];\n      // data.push({\n      //   title: 'Number of Events',\n      //   data: datab\n      // })\n      // StateChart.updateChart(labelb,datab);\n      // Set the appropriate state variable to the value returned by the HTTP response from the server.\n\n      this.setState({\n        chartData: datab,\n        chartLabel: labelb,\n        chartFull: chart\n      });\n    }, err => {\n      // Print the error if there is one.\n      console.log(err);\n    });\n  }\n\n  render() {\n    let isPressed = this.state.showJumbo;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Dashboard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(PageNavbar, {\n      active: \"country\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      class: \"display-3 font-weight-bold text-white outline-this\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }\n    }, \"Protest Data in the United States in 2020\")), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container query-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"buttons-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 13\n      }\n    }, this.state.buttonList), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 11\n      }\n    }), isPressed ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jumbotron\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"query-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 13\n      }\n    }, this.state.tableTitle, this.state.tableHeader, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"results-container\",\n      id: \"results\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 15\n      }\n    }, this.state.queryResults))) : null, /*#__PURE__*/React.createElement(\"img\", {\n      src: \"./us-map.png\",\n      class: \"rounded mx-auto d-block\",\n      alt: \"States with Protests during 2020\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jumbotron\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 11\n      }\n    }, this.state.chartFull), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      class: \"display-6 font-weight-bold text-white outline-this\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }\n    }, \"Made by Puneet, Keith, Robby, and Yolanda\")));\n  }\n\n}\n/*\n<div className=\"query-header\"> \n  <div className=\"header\"><strong>State</strong></div>\n  <div className=\"header\"><strong>Population</strong></div>\n  <div className=\"header\"><strong># Peaceful Protests</strong></div>\n  <div className=\"header\"><strong># Violent Protests</strong></div>\n  <div className=\"header\"><strong># Peaceful per 100K</strong></div>\n  <div className=\"header\"><strong># Violent per 100K</strong></div>\n</div>\n*/\n\n/*\n<div className=\"text-center display-5 font-weight-bold\">Number of Peaceful and Violent Protests in each State in 2020</div>\n*/","map":{"version":3,"sources":["C:/Users/Puneet/Documents/Penn MCIT/Fall 2020/550/Project/repo/protest-webapp/client/src/components/Home.js"],"names":["React","PageNavbar","Query2Row","Query3Row","CountryChart","Home","Component","constructor","props","state","buttonList","queryResults","tableHeader","tableTitle","showJumbo","chartData","chartLabel","chartFull","showQuery2","bind","showQuery3","showQuery5","componentDidMount","buttons","id","setState","fetch","method","then","res","json","err","console","log","genreList","query2Divs","map","query2_Obj","i","population","peaceful","non_peaceful","peaceful_per_100K","non_peaceful_per_100K","header","title","query3List","query3Divs","query3_Obj","event_type","sub_event_type","count","chartList","labelb","query_Obj","event_date","substring","datab","num_events","chart","render","isPressed"],"mappings":"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","sourcesContent":["import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../style/Dashboard.css';\nimport PageNavbar from './PageNavbar';\nimport Query2Row from './Query2Row';\nimport Query3Row from './Query3Row';\nimport CountryChart from './CountryChart';\n\n\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // The state maintained by this React Component. This component maintains the list of genres,\n    // and a list of movies for a specified genre.\n    this.state = {\n      buttonList: [],\n      queryResults: [],\n      tableHeader: [],\n      tableTitle: [],\n      showJumbo: false,\n      chartData: [],\n      chartLabel: [],\n      chartFull: []\n    }\n    this.showQuery2 = this.showQuery2.bind(this);\n    this.showQuery3 = this.showQuery3.bind(this);\n    this.showQuery5 = this.showQuery5.bind(this);\n    //this.showMovies = this.showMovies.bind(this);\n  }\n\n  // React function that is called when the page load.\n  componentDidMount() {\n    // Send an HTTP request to the server.\n    let buttons = [\n      <button class=\"buttons\" id={this.props.id} onClick={() => this.showQuery2()}>Protests per State</button>,\n      <button class=\"buttons\" id={this.props.id} onClick={() => this.showQuery3()}>Protests by Type</button>\n    ];\n\n    this.setState({\n        buttonList: buttons\n    });\n\n    this.showQuery5();\n    /*\n    fetch(\"http://localhost:8081/genres/query2\",\n    {\n      method: 'GET' // The type of HTTP request.\n    }).then(res => {\n      // Convert the response data to a JSON.\n      return res.json();\n    }, err => {\n      // Print the error if there is one.\n      console.log(err);\n    }).then(genreList => {\n      if (!genreList) return;\n      // Map each genreObj in genreList to an HTML element:\n      // A button which triggers the showMovies function for each genre.\n      let query2Divs = genreList.map((query2_Obj, i) =>\n      <Query2Row state={query2_Obj.state} population={query2_Obj.population} peaceful={query2_Obj.peaceful} non_peaceful={query2_Obj.non_peaceful} peaceful_per_100K={query2_Obj.peaceful_per_100K} non_peaceful_per_100K={query2_Obj.non_peaceful_per_100K}/>\n      );\n\n      \n      // Set the state of the genres list to the value returned by the HTTP response from the server.\n      this.setState({\n        query2: query2Divs\n      });\n    }, err => {\n      // Print the error if there is one.\n      console.log(err);\n    });\n    */\n  }\n\n  showQuery2() {\n    fetch(\"http://localhost:8081/country/query2\",\n    {\n      method: 'GET' // The type of HTTP request.\n    }).then(res => {\n      // Convert the response data to a JSON.\n      return res.json();\n    }, err => {\n      // Print the error if there is one.\n      console.log(err);\n    }).then(genreList => {\n      if (!genreList) return;\n      // Map each genreObj in genreList to an HTML element:\n      // A button which triggers the showMovies function for each genre.\n      let query2Divs = genreList.map((query2_Obj, i) =>\n      <Query2Row state={query2_Obj.state == 'DISTRICT OF COLUMBIA' ? 'D.C' : query2_Obj.state} population={query2_Obj.population == null ? '0' : query2_Obj.population} peaceful={query2_Obj.peaceful == null ? '0' : query2_Obj.peaceful} non_peaceful={query2_Obj.non_peaceful==null ? '0' : query2_Obj.non_peaceful} peaceful_per_100K={query2_Obj.peaceful_per_100K == null ? '0' : query2_Obj.peaceful_per_100K} non_peaceful_per_100K={query2_Obj.non_peaceful_per_100K == null ? '0' : query2_Obj.non_peaceful_per_100K}/>\n      );\n\n      let header = [\n        <div className=\"query-header table-responsive-md\"> \n          <div className=\"header\"><strong>State</strong></div>\n          <div className=\"header\"><strong>Population</strong></div>\n          <div className=\"header\"><strong># Peaceful Protests</strong></div>\n          <div className=\"header\"><strong># Violent Protests</strong></div>\n          <div className=\"header\"><strong># Peaceful per 100K</strong></div>\n          <div className=\"header\"><strong># Violent per 100K</strong></div>\n        </div>\n      ];\n\n      let title = [\n        <div className=\"header text-center display-5 font-weight-bold\">Number of Peaceful and Violent Protests in each State in 2020</div>\n      ];\n      \n\n      // Set the state of the genres list to the value returned by the HTTP response from the server.\n      this.setState({\n        queryResults: query2Divs,\n        tableTitle: title,\n        tableHeader: header,\n        showJumbo: true\n      });\n    }, err => {\n      // Print the error if there is one.\n      console.log(err);\n    });\n  }\n\n  showQuery3() {\n    fetch(\"http://localhost:8081/country/query3\",\n    {\n      method: 'GET' // The type of HTTP request.\n    }).then(res => {\n      // Convert the response data to a JSON.\n      return res.json();\n    }, err => {\n      // Print the error if there is one.\n      console.log(err);\n    }).then(query3List => {\n      if (!query3List) return;\n      // Map each genreObj in genreList to an HTML element:\n      // A button which triggers the showMovies function for each genre.\n      let query3Divs = query3List.map((query3_Obj, i) =>\n      <Query3Row event={query3_Obj.event_type} sub_event={query3_Obj.sub_event_type} count={query3_Obj.count}/>\n      );\n\n      let title = [\n        <div className=\"text-center display-5 font-weight-bold \">Types and Count of Different Protests throughout the US</div>\n      ];\n      let header = [\n        <div className=\"query-header\"> \n          <div className=\"header\"><strong>Event Type</strong></div>\n          <div className=\"header\"><strong>Subtype</strong></div>\n          <div className=\"header\"><strong>Amount</strong></div>\n        </div>\n      ];\n\n\n      // Set the state of the genres list to the value returned by the HTTP response from the server.\n      this.setState({\n        queryResults: query3Divs,\n        tableTitle: title,\n        tableHeader: header,\n        showJumbo: true\n      });\n    }, err => {\n      // Print the error if there is one.\n      console.log(err);\n    });\n  }\n\n  showQuery5() {\n\n    fetch(\"http://localhost:8081/query5\",  //change to appropriate URL based on index.js in server folder\n    {\n      method: 'GET' // The type of HTTP request.\n    }).then(res => {\n      // Convert the response data to a JSON.\n      return res.json();\n    }, err => {\n      // Print the error if there is one.\n      console.log(err);\n    }).then(chartList => {\n      if (!chartList) return;\n      let labelb = chartList.map((query_Obj, i) =>\n        query_Obj.event_date.substring(5,10)\n      );\n      let datab = chartList.map((query_Obj, i) =>\n        query_Obj.num_events\n      );\n      let chart = [<CountryChart chartData={datab} chartLabel={labelb}/>];\n      // let data = [];\n      // data.push({\n      //   title: 'Number of Events',\n      //   data: datab\n      // })\n      // StateChart.updateChart(labelb,datab);\n      // Set the appropriate state variable to the value returned by the HTTP response from the server.\n      this.setState({\n        chartData: datab,\n        chartLabel: labelb,\n        chartFull: chart\n      });\n    }, err => {\n      // Print the error if there is one.\n      console.log(err);\n    });\n  }\n\n  render() {\n    let isPressed = this.state.showJumbo;\n    return (\n      <div className=\"Dashboard\">\n\n        <PageNavbar active=\"country\" />\n        <br></br>\n        <div class = \"text-center\">\n          <h3 class=\"display-3 font-weight-bold text-white outline-this\">\n          Protest Data in the United States in 2020</h3>\n        </div>\n        <br></br>\n        <br></br>\n        \n        <div className=\"container query-container\">\n\n            <div className=\"buttons-container\">\n              {this.state.buttonList}\n            </div>\n\n          <br></br>\n          { isPressed ?\n          <div className=\"jumbotron\">\n            <div className=\"query-container\">\n            {this.state.tableTitle}\n              {this.state.tableHeader}\n              <div className=\"results-container\" id=\"results\">\n                {this.state.queryResults}\n              </div>\n            </div>\n          </div>\n          :\n          null\n          }\n          <img src='./us-map.png' class=\"rounded mx-auto d-block\" alt=\"States with Protests during 2020\"></img>\n          <br></br>\n          <br></br>\n          <div className=\"jumbotron\">\n            {this.state.chartFull}\n          </div>\n          <br></br>\n          <br></br>\n        </div>\n        <div class = \"text-center\">\n        <h3 class=\"display-6 font-weight-bold text-white outline-this\">\n        Made by Puneet, Keith, Robby, and Yolanda</h3>\n        </div>\n      </div>\n    );\n  }\n}\n\n/*\n<div className=\"query-header\"> \n  <div className=\"header\"><strong>State</strong></div>\n  <div className=\"header\"><strong>Population</strong></div>\n  <div className=\"header\"><strong># Peaceful Protests</strong></div>\n  <div className=\"header\"><strong># Violent Protests</strong></div>\n  <div className=\"header\"><strong># Peaceful per 100K</strong></div>\n  <div className=\"header\"><strong># Violent per 100K</strong></div>\n</div>\n*/\n\n/*\n<div className=\"text-center display-5 font-weight-bold\">Number of Peaceful and Violent Protests in each State in 2020</div>\n*/"]},"metadata":{},"sourceType":"module"}