{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Puneet\\\\Documents\\\\Penn MCIT\\\\Fall 2020\\\\550\\\\Project\\\\repo\\\\protest-webapp\\\\client\\\\src\\\\components\\\\StateChart.js\";\nimport React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Line } from 'react-chartjs-2';\nimport Chart from 'chart.js';\nvar data = {\n  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n  datasets: [{\n    label: 'All Event Types',\n    fill: false,\n    lineTension: 0.1,\n    backgroundColor: 'rgba(75,192,192,0.4)',\n    borderColor: 'rgba(75,192,192,1)',\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0.0,\n    borderJoinStyle: 'miter',\n    pointBorderColor: 'rgba(75,192,192,1)',\n    pointBackgroundColor: '#fff',\n    pointBorderWidth: 1,\n    pointHoverRadius: 5,\n    pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n    pointHoverBorderColor: 'rgba(220,220,220,1)',\n    pointHoverBorderWidth: 2,\n    pointRadius: 1,\n    pointHitRadius: 10,\n    data: [65, 59, 80, 81, 56, 55, 40]\n  }]\n};\nexport default class StateChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.chartRef = React.createRef();\n    this.state = {\n      labels: props.chartLabel,\n      dataPoints: props.chartData\n    };\n  }\n\n  componentDidUpdate(prevProps, nextProps) {\n    if (prevProps !== this.props) {\n      console.log(nextProps);\n      this.setState({\n        labels: nextProps.chartLabel,\n        dataPoints: nextProps.chartData\n      });\n    }\n  }\n\n  render() {\n    console.log(this.props.chartData);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }, \"Number of Events\"), /*#__PURE__*/React.createElement(Line, {\n      ref: \"chart\",\n      data: data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    }));\n  }\n\n  componentDidMount() {\n    data.datasets[0].data = this.props.chartData;\n    const {\n      datasets\n    } = this.refs.chart.chartInstance.data;\n    console.log(datasets[0].data);\n  }\n\n}\n/*\n    var data = {\n          labels: [],\n          datasets: [\n            {\n              label: 'Total Events',\n              fill: false,\n              lineTension: 0.1,\n              backgroundColor: 'rgba(75,192,192,0.4)',\n              borderColor: 'rgba(75,92,212,1)',\n              borderDash: [],\n              borderDashOffset: 0.0,\n              borderJoinStyle: 'miter',\n              pointBorderColor: 'rgba(75,192,192,1)',\n              pointBackgroundColor: '#fff',\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n              pointHoverBorderColor: 'rgba(220,220,220,1)',\n              pointHoverBorderWidth: 2,\n              pointRadius: 1,\n              pointHitRadius: 10,\n              data: []\n            }\n          ]\n        };\n\nexport default class StateChart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.chartRef = React.createRef();\n        \n\n    }\n\n    render() {\n    return (\n      <div>\n        <h2>Line Example</h2>\n        <Line ref=\"chart\" data={data} />\n      </div>\n    );\n    }\n\n  componentDidMount() {\n    const { datasets } = this.refs.chart.chartInstance.data\n    data.datasets[0].data = this.props.chartData\n    data.labels = this.props.chartLabel\n    console.log(datasets[0].data);\n  }\n}\n*/\n\n/*\nclass StateChart extends React.Component{\n    constructor(props) {\n        super(props);\n        this.chartRef = React.createRef();\n        this.state={\n            chartData: props.chartData\n        }\n    }\n\n    componentDidMount() {\n        console.log(this.chartReference);\n    }\n\n    render() {\n        return(\n            <Line ref={this.chartReference} data={data} options={{}} />\n        );\n    }\n\n}\n\nexport default StateChart;\n*/\n\n/*\n\n<canvas ref={this.chartRef} />\n\n\nreturn(\n            <div className=\"stateChart\">\n\n                <Line\n                    data={this.props.chartData}\n                    options={{\n                        title:{\n                            display:this.props.displayTitle,\n                            text: 'Number of Events per Day ' + this.props.location,\n                            fontsize:25\n                        },\n                        legend:{\n                            display:this.props.displayLegend,\n                            position:this.props.legendPosition\n                        }\n\n                    }}\n                />\n            </div>\n        );\n*/","map":{"version":3,"sources":["C:/Users/Puneet/Documents/Penn MCIT/Fall 2020/550/Project/repo/protest-webapp/client/src/components/StateChart.js"],"names":["React","Line","Chart","data","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","StateChart","Component","constructor","props","chartRef","createRef","state","chartLabel","dataPoints","chartData","componentDidUpdate","prevProps","nextProps","console","log","setState","render","componentDidMount","refs","chart","chartInstance"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,sCAAP;AACA,SAAQC,IAAR,QAAmB,iBAAnB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAGA,IAAIC,IAAI,GAAG;AACTC,EAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,UAAZ,EAAwB,OAAxB,EAAiC,OAAjC,EAA0C,KAA1C,EAAiD,MAAjD,EAAyD,MAAzD,CADC;AAETC,EAAAA,QAAQ,EAAE,CACR;AACEC,IAAAA,KAAK,EAAE,iBADT;AAEEC,IAAAA,IAAI,EAAE,KAFR;AAGEC,IAAAA,WAAW,EAAE,GAHf;AAIEC,IAAAA,eAAe,EAAE,sBAJnB;AAKEC,IAAAA,WAAW,EAAE,oBALf;AAMEC,IAAAA,cAAc,EAAE,MANlB;AAOEC,IAAAA,UAAU,EAAE,EAPd;AAQEC,IAAAA,gBAAgB,EAAE,GARpB;AASEC,IAAAA,eAAe,EAAE,OATnB;AAUEC,IAAAA,gBAAgB,EAAE,oBAVpB;AAWEC,IAAAA,oBAAoB,EAAE,MAXxB;AAYEC,IAAAA,gBAAgB,EAAE,CAZpB;AAaEC,IAAAA,gBAAgB,EAAE,CAbpB;AAcEC,IAAAA,yBAAyB,EAAE,oBAd7B;AAeEC,IAAAA,qBAAqB,EAAE,qBAfzB;AAgBEC,IAAAA,qBAAqB,EAAE,CAhBzB;AAiBEC,IAAAA,WAAW,EAAE,CAjBf;AAkBEC,IAAAA,cAAc,EAAE,EAlBlB;AAmBEpB,IAAAA,IAAI,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB;AAnBR,GADQ;AAFD,CAAX;AA2BA,eAAe,MAAMqB,UAAN,SAAyBxB,KAAK,CAACyB,SAA/B,CAAyC;AACpDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,QAAL,GAAgB5B,KAAK,CAAC6B,SAAN,EAAhB;AACA,SAAKC,KAAL,GAAa;AACT1B,MAAAA,MAAM,EAAEuB,KAAK,CAACI,UADL;AAETC,MAAAA,UAAU,EAAEL,KAAK,CAACM;AAFT,KAAb;AAMH;;AACDC,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACrC,QAAGD,SAAS,KAAK,KAAKR,KAAtB,EAA4B;AACxBU,MAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACA,WAAKG,QAAL,CAAc;AACVnC,QAAAA,MAAM,EAAEgC,SAAS,CAACL,UADR;AAEVC,QAAAA,UAAU,EAAEI,SAAS,CAACH;AAFZ,OAAd;AAIH;AACJ;;AACDO,EAAAA,MAAM,GAAG;AACLH,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKX,KAAL,CAAWM,SAAvB;AACJ,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADA,eAEI,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAC,OAAV;AAAkB,MAAA,IAAI,EAAE9B,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ;AAMC;;AAEDsC,EAAAA,iBAAiB,GAAG;AAChBtC,IAAAA,IAAI,CAACE,QAAL,CAAc,CAAd,EAAiBF,IAAjB,GAAwB,KAAKwB,KAAL,CAAWM,SAAnC;AACA,UAAM;AAAE5B,MAAAA;AAAF,QAAe,KAAKqC,IAAL,CAAUC,KAAV,CAAgBC,aAAhB,CAA8BzC,IAAnD;AACAkC,IAAAA,OAAO,CAACC,GAAR,CAAYjC,QAAQ,CAAC,CAAD,CAAR,CAAYF,IAAxB;AACH;;AAlCmD;AAsCxsourcesContent":["import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Line} from 'react-chartjs-2';\nimport Chart from 'chart.js'\n\n\nvar data = {\n  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n  datasets: [\n    {\n      label: 'All Event Types',\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: 'rgba(75,192,192,0.4)',\n      borderColor: 'rgba(75,192,192,1)',\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: 'rgba(75,192,192,1)',\n      pointBackgroundColor: '#fff',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: [65, 59, 80, 81, 56, 55, 40]\n    }\n  ]\n};\n\nexport default class StateChart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.chartRef = React.createRef();\n        this.state = {\n            labels: props.chartLabel,\n            dataPoints: props.chartData\n        }\n        \n\n    }\n    componentDidUpdate(prevProps, nextProps) {\n        if(prevProps !== this.props){\n            console.log(nextProps);\n            this.setState({\n                labels: nextProps.chartLabel,\n                dataPoints: nextProps.chartData\n            });\n        }\n    }\n    render() {\n        console.log(this.props.chartData);\n    return (\n        <div>\n        <h2>Number of Events</h2>\n            <Line ref=\"chart\" data={data} />\n        </div>\n    );\n    }\n\n    componentDidMount() {\n        data.datasets[0].data = this.props.chartData\n        const { datasets } = this.refs.chart.chartInstance.data\n        console.log(datasets[0].data);\n    }\n}\n\n\n/*\n    var data = {\n          labels: [],\n          datasets: [\n            {\n              label: 'Total Events',\n              fill: false,\n              lineTension: 0.1,\n              backgroundColor: 'rgba(75,192,192,0.4)',\n              borderColor: 'rgba(75,92,212,1)',\n              borderDash: [],\n              borderDashOffset: 0.0,\n              borderJoinStyle: 'miter',\n              pointBorderColor: 'rgba(75,192,192,1)',\n              pointBackgroundColor: '#fff',\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n              pointHoverBorderColor: 'rgba(220,220,220,1)',\n              pointHoverBorderWidth: 2,\n              pointRadius: 1,\n              pointHitRadius: 10,\n              data: []\n            }\n          ]\n        };\n\nexport default class StateChart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.chartRef = React.createRef();\n        \n\n    }\n\n    render() {\n    return (\n      <div>\n        <h2>Line Example</h2>\n        <Line ref=\"chart\" data={data} />\n      </div>\n    );\n    }\n\n  componentDidMount() {\n    const { datasets } = this.refs.chart.chartInstance.data\n    data.datasets[0].data = this.props.chartData\n    data.labels = this.props.chartLabel\n    console.log(datasets[0].data);\n  }\n}\n*/\n/*\nclass StateChart extends React.Component{\n    constructor(props) {\n        super(props);\n        this.chartRef = React.createRef();\n        this.state={\n            chartData: props.chartData\n        }\n    }\n\n    componentDidMount() {\n        console.log(this.chartReference);\n    }\n\n    render() {\n        return(\n            <Line ref={this.chartReference} data={data} options={{}} />\n        );\n    }\n\n}\n\nexport default StateChart;\n*/\n/*\n\n<canvas ref={this.chartRef} />\n\n\nreturn(\n            <div className=\"stateChart\">\n\n                <Line\n                    data={this.props.chartData}\n                    options={{\n                        title:{\n                            display:this.props.displayTitle,\n                            text: 'Number of Events per Day ' + this.props.location,\n                            fontsize:25\n                        },\n                        legend:{\n                            display:this.props.displayLegend,\n                            position:this.props.legendPosition\n                        }\n\n                    }}\n                />\n            </div>\n        );\n*/"]},"metadata":{},"sourceType":"module"}