{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Puneet\\\\Documents\\\\Penn MCIT\\\\Fall 2020\\\\550\\\\Project\\\\repo\\\\protest-webapp\\\\client\\\\src\\\\components\\\\Race.js\";\n\n/*\r\nimport React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../style/Dashboard.css';\r\nimport PageNavbar from './PageNavbar';\r\nimport Query10Row from './Query10Row';\r\nimport RaceChart from './RaceChart';\r\nimport Query13bRow from './Query13bRow';\r\n\r\n\r\nexport default class Race extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      query: [],\r\n      query13b: [],\r\n      questions:[],\r\n      selectedQuestion: \"\",\r\n      selectedQuestionB: \"\",\r\n      tableATitle: [],\r\n      tableBTitle: [],\r\n      tableAHeader: [],\r\n      tableBHeader: [],\r\n      chartLabel: [],\r\n      chartData: [],\r\n      chartFull: [],\r\n      showFields: false\r\n    }\r\n    this.showQuery = this.showQuery.bind(this);\r\n    this.submitQuestion = this.submitQuestion.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.showQuery13b = this.showQuery13b.bind(this);\r\n    //this.submitQuery13b = this.submitQuery13b.bind(this);\r\n  }\r\n\r\n  // React function that is called when the page load.\r\n  componentDidMount() {\r\n    // I made buttons like this that will go at the top. Need a state variable for this in the constructor though. See Home.js\r\n    // let buttons = [\r\n    //   <button class=\"buttons\" id={this.props.id} onClick={() => this.showQuery2()}>Protests per State</button>,\r\n    //   <button class=\"buttons\" id={this.props.id} onClick={() => this.showQuery3()}>Protests by Type</button>\r\n    // ];\r\n    this.showQuery();\r\n    this.showQuery13b();\r\n   \r\n\r\n  }\r\n  handleChange(e) {\r\n    console.log(e.target.value);\r\n    this.setState({\r\n      selectedQuestion: e.target.value\r\n    });\r\n  }\r\n\r\n  submitQuestion() {\r\n    this.setState({\r\n      showFields: true\r\n  });\r\n    this.showQuery();\r\n  \r\n\r\n  this.showQuery13b();\r\n\r\n}\r\n  //example function I made based on Home.js\r\n  showQuery() {\r\n    var chosen = this.state.selectedQuestion;\r\n    if (!chosen || chosen ===\"\"){\r\n      console.log(\"No question asked.\")\r\n    }\r\n    fetch(`http://localhost:8081/race/${chosen}`,  //change to appropriate URL based on index.js in server folder\r\n    {\r\n      method: 'GET' \r\n    }).then(res => {\r\n\r\n      return res.json();\r\n    }, err => {\r\n      console.log(err);\r\n    }).then(queryList => {\r\n      if (!queryList) return;\r\n      let queryDivs = queryList.map((query_Obj, i) =>\r\n      <Query10Row item_name={query_Obj.item_name} equip_qty={query_Obj.equip_qty.toLocaleString()} equip_cost={\"$\" + query_Obj.equip_cost.toLocaleString()} cost_per_item={\"$\" + query_Obj.cost_per_item.toLocaleString()} />\r\n      );\r\n      \r\n      let title = [\r\n        <div className=\"text-center display-5 font-weight-bold \">Results</div>\r\n\r\n      ];\r\n      let header = [\r\n        <div className=\"query-header\">\r\n        <div className=\"header\"><strong>Item Name</strong></div>\r\n          <div className=\"header\"><strong>Total Quantity</strong></div>\r\n          <div className=\"header\"><strong>Total Cost</strong></div>\r\n          <div className=\"header\"><strong>Cost Per Item</strong></div>\r\n        </div>\r\n      ]\r\n      // Set the appropriate state variable to the value returned by the HTTP response from the server.\r\n      this.setState({\r\n        query: queryDivs,\r\n        tableATitle: title,\r\n        tableAHeader: header\r\n      });\r\n    }, err => {\r\n      console.log(err);\r\n    });\r\n  }\r\n\r\n  showQuery13b() {\r\n    //const myChartRef = this.chartRef.current.getContext(\"2d\");\r\n    console.log(\"B\");\r\n    var chosen = this.state.selectedState;\r\n    if (!chosen || chosen === \"\" ) {\r\n      console.log(\"No question was chosen\");\r\n    }\r\n    fetch(`http://localhost:8081/race/query13b`,  //change to appropriate URL based on index.js in server folder\r\n    {\r\n      method: 'GET' // The type of HTTP request.\r\n    }).then(res => {\r\n      // Convert the response data to a JSON.\r\n      return res.json();\r\n    }, err => {\r\n      // Print the error if there is one.\r\n      console.log(err);\r\n    }).then(chartList => {\r\n      if (!chartList) return;\r\n      let labelb = chartList.map((query_Obj, i) =>\r\n        query_Obj.white_rounded\r\n      );\r\n      let datab = chartList.map((query_Obj, i) =>\r\n        query_Obj.events_per_100k\r\n      );\r\n      let chart = [<RaceChart chartData={datab} chartLabel={labelb}/>];\r\n      // let data = [];\r\n      // data.push({\r\n      //   title: 'Number of Events',\r\n      //   data: datab\r\n      // })\r\n      // StateChart.updateChart(labelb,datab);\r\n      // Set the appropriate state variable to the value returned by the HTTP response from the server.\r\n      this.setState({\r\n        chartData: datab,\r\n        chartLabel: labelb,\r\n        chartFull: chart\r\n      });\r\n    }, err => {\r\n      // Print the error if there is one.\r\n      console.log(err);\r\n    });\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  /*\r\n  showQuery13b() {\r\n    console.log(\"13B\");\r\n    var chosen = this.state.selectedQuestion;\r\n    if (!chosen || chosen === \"\" ) {\r\n      console.log(\"No question was asked\");\r\n    }\r\n    fetch(`http://localhost:8081/race/${chosen}`,  //change to appropriate URL based on index.js in server folder\r\n    {\r\n      method: 'GET' // The type of HTTP request.\r\n    }).then(res => {\r\n      // Convert the response data to a JSON.\r\n      return res.json();\r\n    }, err => {\r\n      // Print the error if there is one.\r\n      console.log(err);\r\n    }).then(chartList => {\r\n      if (!chartList) return;\r\n      //let labelb = chartList.map((query_Obj, i) =>\r\n        //query_Obj.white_rounded\r\n      //);\r\n      //let datab = chartList.map((query_Obj, i) =>\r\n        //query_Obj.events_per_100k\r\n      //);\r\n      let queryDivs = chartList.map((query_obj, i) =>\r\n      <Query13bRow white_rounded={query_obj.white_rounded} events_per_100k={query_obj.events_per_100k}/>\r\n      )\r\n      //let chartTitle = 'Number of Events Per 100,000 Residents, Ordered By Percentage of Population that is White';\r\n      //let chart = [<Query13bRow chartData={query_obj.datab} chartLabel={query_obj.labelb} title = {chartTitle}/>];\r\n      this.setState({\r\n        queryDivs: query,\r\n        //chartLabel: labelb,\r\n        //chartFull: chart\r\n      });\r\n    }, err => {\r\n      console.log(err);\r\n    });\r\n  }\r\n  */\n\n/*<div class = \"text-center\">\r\n          <h3 class=\"display-3 font-weight-bold text-white\">1033 and Race</h3>\r\n        </div>*/\n\n/*\r\n        showQuery13b() {\r\n          //const myChartRef = this.chartRef.current.getContext(\"2d\");\r\n          console.log(\"B\");\r\n          var chosen = this.state.selectedQuestion;\r\n          if (!chosen || chosen === \"\" ) {\r\n            console.log(\"No question was asked\");\r\n          }\r\n          fetch(`http://localhost:8081/race/${chosen}`,  //change to appropriate URL based on index.js in server folder\r\n          {\r\n            method: 'GET' // The type of HTTP request.\r\n            \r\n          \r\n            }).then(res => {\r\n            // Convert the response data to a JSON.\r\n            return res.json();\r\n          }, err => {\r\n            // Print the error if there is one.\r\n            console.log(err);\r\n          }).then(chartList => {\r\n            if (!chartList) return;\r\n            let xVal = chartList.map((query_Obj, i) =>\r\n              query_Obj.white_rounded\r\n            );\r\n            let yVal = chartList.map((query_Obj, i) =>\r\n              query_Obj.events_per_100k\r\n            );\r\n            let chart = [<RaceChart yVal={yVal} xVal={xVal} xLabel = {\"Percent of Population that is White\"} yLabel= {\"Number of Events Per 100,000 Residents\"} title = {\"Number of Events Per 100,000 Residents, Ordered By Percentage of Population that is White\"}/>];\r\n            \r\n            this.setState({\r\n              yVal: yVal,\r\n              xVal: xVal,\r\n              chartFull: chart\r\n            });\r\n          }, err => {\r\n            // Print the error if there is one.\r\n            console.log(err);\r\n          });\r\n        }\r\n      */\n\n/*     \r\nrender() {\r\n    let isPressed = this.state.showFields;    \r\n  return (\r\n    <div className=\"Race\">\r\n        <PageNavbar active=\"Race\" />\r\n      \r\n        <div className=\"container query-container\">\r\n          <br></br>\r\n          <div class = \"text-center\">\r\n          <h3 class=\"display-4 font-weight-bold text-white outline-this\">Does Race Affect What Equipment is Requested?</h3>\r\n        </div>\r\n          <div className= \"dropdown-container\">\r\n            <select value={this.state.selectedQuery} onChange={this.handleChange} className=\"dropdown\" id=\"raceQueryDropdown\">\r\n              <option select value> -- Ask a Question -- </option>\r\n              <option value=\"query10a\">What are the 10 most requested items in counties where racial minorities are the majority population?</option>\r\n              <option value=\"query10b\">What are the 10 most requested items in counties where the majority of the population is white?</option>\r\n              <option value=\"query11\">In counties where racial minorities are the majority of the population, what is the average value of requested equpiment?</option>\r\n            </select>\r\n            <button className=\"submit-btn\" id=\"querySubmitBtn\" onClick={this.submitQuestion}>Ask</button>\r\n            </div>\r\n            <div class = \"text-center\">\r\n            <h3 class=\"display-4 font-weight-bold text-white outline-this\">Results</h3>\r\n        </div>\r\n       \r\n       {isPressed ?\r\n       <div className = \"container query-container\">\r\n        <div className=\"jumbotron\">\r\n          {this.state.chartFull}\r\n          </div>\r\n          <div className=\"jumbotron\">\r\n          {this.state.tableATitle}\r\n            <div className=\"query-container\">\r\n            {this.state.tableAHeader}\r\n          <div className=\"results-container\" id=\"results\">\r\n                {this.state.query}\r\n            </div>\r\n          </div>\r\n        </div>\r\n          <br></br>\r\n            \r\n      <div className=\"container query-container\">\r\n          <br></br>\r\n          <div class = \"text-center\">\r\n          <h3 class=\"display-4 font-weight-bold text-white outline-this\">On Average, Does Race Correlate With the Number of Events in a Given County?</h3>\r\n        </div>\r\n          <div className= \"dropdown-container\">\r\n            <select value={this.state.selectedQuery} onChange={this.handleChange} className=\"dropdown\" id=\"raceQueryBDropdown\">\r\n              <option select value> -- Ask a Question -- </option>\r\n              <option value=\"query12b\">In counties with a population greater than 100,000, how many events occurred, per capita?</option>\r\n              <option value=\"query13b\">Is there a correlation between the percent of a county's population that is white and the number of events that occurred in the same county?</option>\r\n              <option value=\"query12d\">How does the percentage of a large county's population that is white affect the value of requested equipment?</option>\r\n              <option value=\"query13d\">How does the percentage of any county's population that is white affect the value of requested equipment?</option>\r\n              </select>\r\n            <button className=\"submit-btn\" id=\"querySubmitBtnB\" onClick={this.submitQuery13b}>Ask</button>\r\n            </div>\r\n            <div class = \"text-center\">\r\n          <h3 class=\"display-4 font-weight-bold text-white double-outline\">{this.state.selectedQuery}</h3>\r\n        </div>\r\n      </div>\r\n      <div className=\"container query-container\">\r\n        <div className=\"jumbotron\">\r\n          {this.state.query13b}\r\n        </div>\r\n        </div>\r\n      </div>\r\n        : null }\r\n        </div>\r\n        </div>\r\n    );\r\n}\r\n}\r\n*/\nimport React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../style/Dashboard.css';\nimport PageNavbar from './PageNavbar';\nimport Query10Row from './Query10Row';\nimport RaceChart from './RaceChart';\nexport default class Race extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      query: [],\n      queryb: [],\n      questions: [],\n      selectedQuestion: \"\",\n      selectedQuestionB: \"\",\n      tableATitle: [],\n      tableBTitle: [],\n      tableAHeader: [],\n      tableBHeader: [],\n      chartLabel: [],\n      chartData: [],\n      chartFull: []\n    };\n    this.showQuery = this.showQuery.bind(this);\n    this.submitQuestion = this.submitQuestion.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleChange2 = this.handleChange2.bind(this);\n    this.showQueryb = this.showQueryb.bind(this);\n    this.submitQuestionb = this.submitQuestionb.bind(this);\n  } // React function that is called when the page load.\n\n\n  componentDidMount() {// I made buttons like this that will go at the top. Need a state variable for this in the constructor though. See Home.js\n    // let buttons = [\n    //   <button class=\"buttons\" id={this.props.id} onClick={() => this.showQuery2()}>Protests per State</button>,\n    //   <button class=\"buttons\" id={this.props.id} onClick={() => this.showQuery3()}>Protests by Type</button>\n    // ];\n  }\n\n  handleChange(e) {\n    console.log(e.target.value);\n    this.setState({\n      selectedQuestion: e.target.value\n    });\n  }\n\n  handleChange2(e) {\n    console.log(e.target.value);\n    this.setState({\n      selectedQuestionB: e.target.value.substring(0, 1)\n    });\n  }\n\n  submitQuestion() {\n    this.showQuery();\n  }\n\n  submitQuestionb() {\n    this.showQueryb();\n  } //example function I made based on Home.js\n\n\n  showQuery() {\n    var chosen = this.state.selectedQuestion;\n\n    if (!chosen || chosen === \"\") {\n      console.log(\"No question asked.\");\n    }\n\n    fetch(`http://localhost:8081/race/${chosen}`, //change to appropriate URL based on index.js in server folder\n    {\n      method: 'GET'\n    }).then(res => {\n      // Convert the response data to a JSON.\n      return res.json();\n    }, err => {\n      console.log(err);\n    }).then(queryList => {\n      if (!queryList) return;\n      let queryDivs = queryList.map((query_Obj, i) => /*#__PURE__*/React.createElement(Query10Row, {\n        item_name: query_Obj.item_name,\n        equip_qty: query_Obj.equip_qty.toLocaleString(),\n        equip_cost: \"$\" + query_Obj.equip_cost.toLocaleString(),\n        cost_per_item: \"$\" + query_Obj.cost_per_item.toLocaleString(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 7\n        }\n      }));\n      let title = [/*#__PURE__*/React.createElement(\"div\", {\n        className: \"text-center display-5 font-weight-bold \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 9\n        }\n      }, \"Results\")];\n      let header = [/*#__PURE__*/React.createElement(\"div\", {\n        className: \"query-header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 35\n        }\n      }, \"Item Name\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 35\n        }\n      }, \"Total Quantity\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 35\n        }\n      }, \"Total Cost\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 35\n        }\n      }, \"Cost Per Item\")))]; // Set the appropriate state variable to the value returned by the HTTP response from the server.\n\n      this.setState({\n        query: queryDivs,\n        tableATitle: title,\n        tableAHeader: header\n      });\n    }, err => {\n      console.log(err);\n    });\n  }\n  /*\r\n  showQueryb() {\r\n    console.log(\"B\");\r\n    var chosen = this.state.selectedQuestion;\r\n    if (!chosen || chosen === \"\" ) {\r\n      console.log(\"No question was asked\");\r\n    }\r\n    fetch(`http://localhost:8081/race/${chosen}`,  //change to appropriate URL based on index.js in server folder\r\n    {\r\n      method: 'GET' // The type of HTTP request.\r\n    }).then(res => {\r\n      // Convert the response data to a JSON.\r\n      return res.json();\r\n    }, err => {\r\n      // Print the error if there is one.\r\n      console.log(err);\r\n    }).then(chartList => {\r\n      if (!chartList) return;\r\n      let labelb = chartList.map((query_Obj, i) =>\r\n        query_Obj.white\r\n      );\r\n      let datab = chartList.map((query_Obj, i) =>\r\n        query_Obj.events_per_capita\r\n      );\r\n      let chart = [<RaceChart chartData={datab} chartLabel={labelb}/>];\r\n      this.setState({\r\n        chartData: datab,\r\n        chartLabel: labelb,\r\n        chartFull: chart\r\n      });\r\n    }, err => {\r\n      console.log(err);\r\n    });\r\n  }\r\n  */\n\n  /*<div class = \"text-center\">\r\n            <h3 class=\"display-3 font-weight-bold text-white\">1033 and Race</h3>\r\n          </div>*/\n\n\n  showQueryb() {\n    //const myChartRef = this.chartRef.current.getContext(\"2d\");\n    console.log(\"B\");\n    var chosen = this.state.selectedQuestionB;\n\n    if (!chosen || chosen === \"\") {\n      console.log(\"No state was chosen\");\n    }\n\n    fetch(`http://localhost:8081/race/query13b`, //change to appropriate URL based on index.js in server folder\n    {\n      method: 'GET' // The type of HTTP request.\n\n    }).then(res => {\n      // Convert the response data to a JSON.\n      return res.json();\n    }, err => {\n      // Print the error if there is one.\n      console.log(err);\n    }).then(chartList => {\n      if (!chartList) return;\n      let labelb = chartList.map((query_Obj, i) => query_Obj.white_rounded);\n      let datab = chartList.map((query_Obj, i) => Math.round(query_Obj.events_per_100k));\n      let chart = [/*#__PURE__*/React.createElement(RaceChart, {\n        chartData: datab,\n        chartLabel: labelb,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 20\n        }\n      })];\n      this.setState({\n        // chartData: datab,\n        // chartLabel: labelb,\n        chartFull: chart\n      });\n    }, err => {\n      // Print the error if there is one.\n      console.log(err);\n    });\n  }\n\n  showQueryc() {\n    console.log(\"C\");\n  }\n\n  render() {\n    //this can be changed completely to suit your needs\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Race\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(PageNavbar, {\n      active: \"race\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container query-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      class: \"display-4 font-weight-bold text-white outline-this\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 13\n      }\n    }, \"Does Race Affect What Equipment is Requested?\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"dropdown-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      value: this.state.selectedQuestion,\n      onChange: this.handleChange,\n      className: \"dropdown\",\n      id: \"raceQueryDropdown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      select: true,\n      value: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 17\n      }\n    }, \" -- Ask a Question -- \"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"query10a\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 17\n      }\n    }, \"What are the 10 most requested items in counties where racial minorities are the majority population?\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"query10b\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 17\n      }\n    }, \"What are the 10 most requested items in counties where the majority of the population is white?\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"query11\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 17\n      }\n    }, \"In counties where racial minorities are the majority of the population, what is the average value of requested equpiment?\")), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"submit-btn\",\n      id: \"querySubmitBtn\",\n      onClick: this.submitQuestion,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 15\n      }\n    }, \"Ask\")), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      class: \"display-4 font-weight-bold text-white outline-this\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534,\n        columnNumber: 15\n      }\n    }, \"Results\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jumbotron\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 11\n      }\n    }, this.state.tableATitle, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container query-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 13\n      }\n    }, this.state.tableAHeader, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"results-container\",\n      id: \"results\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 13\n      }\n    }, this.state.query))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container query-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      class: \"display-4 font-weight-bold text-white outline-this\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555,\n        columnNumber: 13\n      }\n    }, \"Do Race Demographics Correlate With the Number of Events on average in a Given County?\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"dropdown-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      value: this.state.selectedQuery,\n      onChange: this.handleChange2,\n      className: \"dropdown\",\n      id: \"raceQueryDropdown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      select: true,\n      value: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 17\n      }\n    }, \" -- Ask a Question -- \"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"query12b\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 17\n      }\n    }, \"1. In counties with a population greater than 100,000, how many events occurred, per capita?\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"query13b\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 17\n      }\n    }, \"2. Is there a correlation between the percent of a county's population that is white and the number of events that occurred in the same county?\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"query12d\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 17\n      }\n    }, \"3. How does the percentage of a large county's population that is white affect the value of requested equipment?\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"query13d\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563,\n        columnNumber: 17\n      }\n    }, \"4. How does the percentage of any county's population that is white affect the value of requested equipment?\")), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"submit-btn\",\n      id: \"querySubmitBtn\",\n      onClick: this.submitQuestionb,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 15\n      }\n    }, \"Ask\")), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      class: \"display-4 font-weight-bold text-white double-outline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 15\n      }\n    }, \"Results\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container query-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jumbotron\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 11\n      }\n    }, this.state.chartFull), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jumbotron\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 575,\n        columnNumber: 11\n      }\n    }, this.state.tableBTitle, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"query-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577,\n        columnNumber: 13\n      }\n    }, this.state.tableBHeader, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"results-container\",\n      id: \"results\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579,\n        columnNumber: 15\n      }\n    }, this.state.queryb)))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Puneet/Documents/Penn MCIT/Fall 2020/550/Project/repo/protest-webapp/client/src/components/Race.js"],"names":["React","PageNavbar","Query10Row","RaceChart","Race","Component","constructor","props","state","query","queryb","questions","selectedQuestion","selectedQuestionB","tableATitle","tableBTitle","tableAHeader","tableBHeader","chartLabel","chartData","chartFull","showQuery","bind","submitQuestion","handleChange","handleChange2","showQueryb","submitQuestionb","componentDidMount","e","console","log","target","value","setState","substring","chosen","fetch","method","then","res","json","err","queryList","queryDivs","map","query_Obj","i","item_name","equip_qty","toLocaleString","equip_cost","cost_per_item","title","header","chartList","labelb","white_rounded","datab","Math","round","events_per_100k","chart","showQueryc","render","selectedQuery"],"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","sourcesContent":["/*\r\nimport React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../style/Dashboard.css';\r\nimport PageNavbar from './PageNavbar';\r\nimport Query10Row from './Query10Row';\r\nimport RaceChart from './RaceChart';\r\nimport Query13bRow from './Query13bRow';\r\n\r\n\r\nexport default class Race extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      query: [],\r\n      query13b: [],\r\n      questions:[],\r\n      selectedQuestion: \"\",\r\n      selectedQuestionB: \"\",\r\n      tableATitle: [],\r\n      tableBTitle: [],\r\n      tableAHeader: [],\r\n      tableBHeader: [],\r\n      chartLabel: [],\r\n      chartData: [],\r\n      chartFull: [],\r\n      showFields: false\r\n    }\r\n    this.showQuery = this.showQuery.bind(this);\r\n    this.submitQuestion = this.submitQuestion.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.showQuery13b = this.showQuery13b.bind(this);\r\n    //this.submitQuery13b = this.submitQuery13b.bind(this);\r\n  }\r\n\r\n  // React function that is called when the page load.\r\n  componentDidMount() {\r\n    // I made buttons like this that will go at the top. Need a state variable for this in the constructor though. See Home.js\r\n    // let buttons = [\r\n    //   <button class=\"buttons\" id={this.props.id} onClick={() => this.showQuery2()}>Protests per State</button>,\r\n    //   <button class=\"buttons\" id={this.props.id} onClick={() => this.showQuery3()}>Protests by Type</button>\r\n    // ];\r\n    this.showQuery();\r\n    this.showQuery13b();\r\n   \r\n\r\n  }\r\n  handleChange(e) {\r\n    console.log(e.target.value);\r\n    this.setState({\r\n      selectedQuestion: e.target.value\r\n    });\r\n  }\r\n\r\n  submitQuestion() {\r\n    this.setState({\r\n      showFields: true\r\n  });\r\n    this.showQuery();\r\n  \r\n\r\n  this.showQuery13b();\r\n\r\n}\r\n  //example function I made based on Home.js\r\n  showQuery() {\r\n    var chosen = this.state.selectedQuestion;\r\n    if (!chosen || chosen ===\"\"){\r\n      console.log(\"No question asked.\")\r\n    }\r\n    fetch(`http://localhost:8081/race/${chosen}`,  //change to appropriate URL based on index.js in server folder\r\n    {\r\n      method: 'GET' \r\n    }).then(res => {\r\n\r\n      return res.json();\r\n    }, err => {\r\n      console.log(err);\r\n    }).then(queryList => {\r\n      if (!queryList) return;\r\n      let queryDivs = queryList.map((query_Obj, i) =>\r\n      <Query10Row item_name={query_Obj.item_name} equip_qty={query_Obj.equip_qty.toLocaleString()} equip_cost={\"$\" + query_Obj.equip_cost.toLocaleString()} cost_per_item={\"$\" + query_Obj.cost_per_item.toLocaleString()} />\r\n      );\r\n      \r\n      let title = [\r\n        <div className=\"text-center display-5 font-weight-bold \">Results</div>\r\n\r\n      ];\r\n      let header = [\r\n        <div className=\"query-header\">\r\n        <div className=\"header\"><strong>Item Name</strong></div>\r\n          <div className=\"header\"><strong>Total Quantity</strong></div>\r\n          <div className=\"header\"><strong>Total Cost</strong></div>\r\n          <div className=\"header\"><strong>Cost Per Item</strong></div>\r\n        </div>\r\n      ]\r\n      // Set the appropriate state variable to the value returned by the HTTP response from the server.\r\n      this.setState({\r\n        query: queryDivs,\r\n        tableATitle: title,\r\n        tableAHeader: header\r\n      });\r\n    }, err => {\r\n      console.log(err);\r\n    });\r\n  }\r\n\r\n  showQuery13b() {\r\n    //const myChartRef = this.chartRef.current.getContext(\"2d\");\r\n    console.log(\"B\");\r\n    var chosen = this.state.selectedState;\r\n    if (!chosen || chosen === \"\" ) {\r\n      console.log(\"No question was chosen\");\r\n    }\r\n    fetch(`http://localhost:8081/race/query13b`,  //change to appropriate URL based on index.js in server folder\r\n    {\r\n      method: 'GET' // The type of HTTP request.\r\n    }).then(res => {\r\n      // Convert the response data to a JSON.\r\n      return res.json();\r\n    }, err => {\r\n      // Print the error if there is one.\r\n      console.log(err);\r\n    }).then(chartList => {\r\n      if (!chartList) return;\r\n      let labelb = chartList.map((query_Obj, i) =>\r\n        query_Obj.white_rounded\r\n      );\r\n      let datab = chartList.map((query_Obj, i) =>\r\n        query_Obj.events_per_100k\r\n      );\r\n      let chart = [<RaceChart chartData={datab} chartLabel={labelb}/>];\r\n      // let data = [];\r\n      // data.push({\r\n      //   title: 'Number of Events',\r\n      //   data: datab\r\n      // })\r\n      // StateChart.updateChart(labelb,datab);\r\n      // Set the appropriate state variable to the value returned by the HTTP response from the server.\r\n      this.setState({\r\n        chartData: datab,\r\n        chartLabel: labelb,\r\n        chartFull: chart\r\n      });\r\n    }, err => {\r\n      // Print the error if there is one.\r\n      console.log(err);\r\n    });\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  /*\r\n  showQuery13b() {\r\n    console.log(\"13B\");\r\n    var chosen = this.state.selectedQuestion;\r\n    if (!chosen || chosen === \"\" ) {\r\n      console.log(\"No question was asked\");\r\n    }\r\n    fetch(`http://localhost:8081/race/${chosen}`,  //change to appropriate URL based on index.js in server folder\r\n    {\r\n      method: 'GET' // The type of HTTP request.\r\n    }).then(res => {\r\n      // Convert the response data to a JSON.\r\n      return res.json();\r\n    }, err => {\r\n      // Print the error if there is one.\r\n      console.log(err);\r\n    }).then(chartList => {\r\n      if (!chartList) return;\r\n      //let labelb = chartList.map((query_Obj, i) =>\r\n        //query_Obj.white_rounded\r\n      //);\r\n      //let datab = chartList.map((query_Obj, i) =>\r\n        //query_Obj.events_per_100k\r\n      //);\r\n      let queryDivs = chartList.map((query_obj, i) =>\r\n      <Query13bRow white_rounded={query_obj.white_rounded} events_per_100k={query_obj.events_per_100k}/>\r\n      )\r\n      //let chartTitle = 'Number of Events Per 100,000 Residents, Ordered By Percentage of Population that is White';\r\n      //let chart = [<Query13bRow chartData={query_obj.datab} chartLabel={query_obj.labelb} title = {chartTitle}/>];\r\n      this.setState({\r\n        queryDivs: query,\r\n        //chartLabel: labelb,\r\n        //chartFull: chart\r\n      });\r\n    }, err => {\r\n      console.log(err);\r\n    });\r\n  }\r\n  */\r\n/*<div class = \"text-center\">\r\n          <h3 class=\"display-3 font-weight-bold text-white\">1033 and Race</h3>\r\n        </div>*/ \r\n/*\r\n        showQuery13b() {\r\n          //const myChartRef = this.chartRef.current.getContext(\"2d\");\r\n          console.log(\"B\");\r\n          var chosen = this.state.selectedQuestion;\r\n          if (!chosen || chosen === \"\" ) {\r\n            console.log(\"No question was asked\");\r\n          }\r\n          fetch(`http://localhost:8081/race/${chosen}`,  //change to appropriate URL based on index.js in server folder\r\n          {\r\n            method: 'GET' // The type of HTTP request.\r\n            \r\n          \r\n            }).then(res => {\r\n            // Convert the response data to a JSON.\r\n            return res.json();\r\n          }, err => {\r\n            // Print the error if there is one.\r\n            console.log(err);\r\n          }).then(chartList => {\r\n            if (!chartList) return;\r\n            let xVal = chartList.map((query_Obj, i) =>\r\n              query_Obj.white_rounded\r\n            );\r\n            let yVal = chartList.map((query_Obj, i) =>\r\n              query_Obj.events_per_100k\r\n            );\r\n            let chart = [<RaceChart yVal={yVal} xVal={xVal} xLabel = {\"Percent of Population that is White\"} yLabel= {\"Number of Events Per 100,000 Residents\"} title = {\"Number of Events Per 100,000 Residents, Ordered By Percentage of Population that is White\"}/>];\r\n            \r\n            this.setState({\r\n              yVal: yVal,\r\n              xVal: xVal,\r\n              chartFull: chart\r\n            });\r\n          }, err => {\r\n            // Print the error if there is one.\r\n            console.log(err);\r\n          });\r\n        }\r\n      */\r\n  /*     \r\n  render() {\r\n      let isPressed = this.state.showFields;    \r\n    return (\r\n      <div className=\"Race\">\r\n\r\n        <PageNavbar active=\"Race\" />\r\n        \r\n\r\n        <div className=\"container query-container\">\r\n            <br></br>\r\n            <div class = \"text-center\">\r\n            <h3 class=\"display-4 font-weight-bold text-white outline-this\">Does Race Affect What Equipment is Requested?</h3>\r\n          </div>\r\n            <div className= \"dropdown-container\">\r\n              <select value={this.state.selectedQuery} onChange={this.handleChange} className=\"dropdown\" id=\"raceQueryDropdown\">\r\n                <option select value> -- Ask a Question -- </option>\r\n                <option value=\"query10a\">What are the 10 most requested items in counties where racial minorities are the majority population?</option>\r\n                <option value=\"query10b\">What are the 10 most requested items in counties where the majority of the population is white?</option>\r\n                <option value=\"query11\">In counties where racial minorities are the majority of the population, what is the average value of requested equpiment?</option>\r\n              </select>\r\n              <button className=\"submit-btn\" id=\"querySubmitBtn\" onClick={this.submitQuestion}>Ask</button>\r\n              </div>\r\n              <div class = \"text-center\">\r\n              <h3 class=\"display-4 font-weight-bold text-white outline-this\">Results</h3>\r\n          </div>\r\n         \r\n         {isPressed ?\r\n         <div className = \"container query-container\">\r\n          <div className=\"jumbotron\">\r\n            {this.state.chartFull}\r\n            </div>\r\n            <div className=\"jumbotron\">\r\n            {this.state.tableATitle}\r\n\r\n            <div className=\"query-container\">\r\n\r\n            {this.state.tableAHeader}\r\n            <div className=\"results-container\" id=\"results\">\r\n\r\n                {this.state.query}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <br></br>\r\n              \r\n        <div className=\"container query-container\">\r\n            <br></br>\r\n            <div class = \"text-center\">\r\n            <h3 class=\"display-4 font-weight-bold text-white outline-this\">On Average, Does Race Correlate With the Number of Events in a Given County?</h3>\r\n          </div>\r\n            <div className= \"dropdown-container\">\r\n              <select value={this.state.selectedQuery} onChange={this.handleChange} className=\"dropdown\" id=\"raceQueryBDropdown\">\r\n                <option select value> -- Ask a Question -- </option>\r\n                <option value=\"query12b\">In counties with a population greater than 100,000, how many events occurred, per capita?</option>\r\n                <option value=\"query13b\">Is there a correlation between the percent of a county's population that is white and the number of events that occurred in the same county?</option>\r\n                <option value=\"query12d\">How does the percentage of a large county's population that is white affect the value of requested equipment?</option>\r\n                <option value=\"query13d\">How does the percentage of any county's population that is white affect the value of requested equipment?</option>\r\n\r\n              </select>\r\n              <button className=\"submit-btn\" id=\"querySubmitBtnB\" onClick={this.submitQuery13b}>Ask</button>\r\n              </div>\r\n              <div class = \"text-center\">\r\n            <h3 class=\"display-4 font-weight-bold text-white double-outline\">{this.state.selectedQuery}</h3>\r\n          </div>\r\n        </div>\r\n        <div className=\"container query-container\">\r\n          <div className=\"jumbotron\">\r\n            {this.state.query13b}\r\n          </div>\r\n          </div>\r\n        </div>\r\n          : null }\r\n          </div>\r\n          </div>\r\n\r\n    );\r\n  }\r\n}\r\n*/\r\nimport React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../style/Dashboard.css';\r\nimport PageNavbar from './PageNavbar';\r\nimport Query10Row from './Query10Row';\r\nimport RaceChart from './RaceChart';\r\n\r\n\r\nexport default class Race extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      query: [],\r\n      queryb: [],\r\n      questions:[],\r\n      selectedQuestion: \"\",\r\n      selectedQuestionB: \"\",\r\n      tableATitle: [],\r\n      tableBTitle: [],\r\n      tableAHeader: [],\r\n      tableBHeader: [],\r\n      chartLabel: [],\r\n      chartData: [],\r\n      chartFull: []\r\n    }\r\n    this.showQuery = this.showQuery.bind(this);\r\n    this.submitQuestion = this.submitQuestion.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleChange2 = this.handleChange2.bind(this);\r\n    this.showQueryb = this.showQueryb.bind(this);\r\n    this.submitQuestionb = this.submitQuestionb.bind(this);\r\n  }\r\n\r\n  // React function that is called when the page load.\r\n  componentDidMount() {\r\n    // I made buttons like this that will go at the top. Need a state variable for this in the constructor though. See Home.js\r\n    // let buttons = [\r\n    //   <button class=\"buttons\" id={this.props.id} onClick={() => this.showQuery2()}>Protests per State</button>,\r\n    //   <button class=\"buttons\" id={this.props.id} onClick={() => this.showQuery3()}>Protests by Type</button>\r\n    // ];\r\n\r\n   \r\n\r\n  }\r\n  handleChange(e) {\r\n    console.log(e.target.value);\r\n    this.setState({\r\n      selectedQuestion: e.target.value\r\n    });\r\n  }\r\n\r\n  handleChange2(e) {\r\n    console.log(e.target.value);\r\n    this.setState({\r\n      selectedQuestionB: e.target.value.substring(0,1)\r\n    });\r\n  }\r\n\r\n\r\n  submitQuestion() {\r\n    this.showQuery();\r\n  }\r\n  submitQuestionb(){\r\n    this.showQueryb();\r\n\r\n  }\r\n  //example function I made based on Home.js\r\n  showQuery() {\r\n    var chosen = this.state.selectedQuestion;\r\n    if (!chosen || chosen ===\"\"){\r\n      console.log(\"No question asked.\")\r\n    }\r\n    fetch(`http://localhost:8081/race/${chosen}`,  //change to appropriate URL based on index.js in server folder\r\n    {\r\n      method: 'GET' \r\n    }).then(res => {\r\n      // Convert the response data to a JSON.\r\n      return res.json();\r\n    }, err => {\r\n      console.log(err);\r\n    }).then(queryList => {\r\n      if (!queryList) return;\r\n      \r\n      let queryDivs = queryList.map((query_Obj, i) =>\r\n      <Query10Row item_name={query_Obj.item_name} equip_qty={query_Obj.equip_qty.toLocaleString()} equip_cost={\"$\" + query_Obj.equip_cost.toLocaleString()} cost_per_item={\"$\" + query_Obj.cost_per_item.toLocaleString()} />\r\n      );\r\n\r\n      \r\n      let title = [\r\n        <div className=\"text-center display-5 font-weight-bold \">Results</div>\r\n\r\n      ];\r\n      let header = [\r\n        <div className=\"query-header\">\r\n          <div className=\"header\"><strong>Item Name</strong></div>\r\n          <div className=\"header\"><strong>Total Quantity</strong></div>\r\n          <div className=\"header\"><strong>Total Cost</strong></div>\r\n          <div className=\"header\"><strong>Cost Per Item</strong></div>\r\n        </div>\r\n      ]\r\n      // Set the appropriate state variable to the value returned by the HTTP response from the server.\r\n      this.setState({\r\n        query: queryDivs,\r\n        tableATitle: title,\r\n        tableAHeader: header\r\n      });\r\n    }, err => {\r\n      console.log(err);\r\n    });\r\n  }\r\n  /*\r\n  showQueryb() {\r\n    console.log(\"B\");\r\n    var chosen = this.state.selectedQuestion;\r\n    if (!chosen || chosen === \"\" ) {\r\n      console.log(\"No question was asked\");\r\n    }\r\n    fetch(`http://localhost:8081/race/${chosen}`,  //change to appropriate URL based on index.js in server folder\r\n    {\r\n      method: 'GET' // The type of HTTP request.\r\n    }).then(res => {\r\n      // Convert the response data to a JSON.\r\n      return res.json();\r\n    }, err => {\r\n      // Print the error if there is one.\r\n      console.log(err);\r\n    }).then(chartList => {\r\n      if (!chartList) return;\r\n      let labelb = chartList.map((query_Obj, i) =>\r\n        query_Obj.white\r\n      );\r\n      let datab = chartList.map((query_Obj, i) =>\r\n        query_Obj.events_per_capita\r\n      );\r\n      let chart = [<RaceChart chartData={datab} chartLabel={labelb}/>];\r\n      this.setState({\r\n        chartData: datab,\r\n        chartLabel: labelb,\r\n        chartFull: chart\r\n      });\r\n    }, err => {\r\n      console.log(err);\r\n    });\r\n  }\r\n  */\r\n/*<div class = \"text-center\">\r\n          <h3 class=\"display-3 font-weight-bold text-white\">1033 and Race</h3>\r\n        </div>*/ \r\n\r\n  showQueryb() {\r\n    //const myChartRef = this.chartRef.current.getContext(\"2d\");\r\n    console.log(\"B\");\r\n    var chosen = this.state.selectedQuestionB;\r\n    if (!chosen || chosen === \"\" ) {\r\n      console.log(\"No state was chosen\");\r\n    }\r\n    fetch(`http://localhost:8081/race/query13b`,  //change to appropriate URL based on index.js in server folder\r\n    {\r\n      method: 'GET' // The type of HTTP request.\r\n    }).then(res => {\r\n      // Convert the response data to a JSON.\r\n      return res.json();\r\n    }, err => {\r\n      // Print the error if there is one.\r\n      console.log(err);\r\n    }).then(chartList => {\r\n      if (!chartList) return;\r\n      let labelb = chartList.map((query_Obj, i) =>\r\n        query_Obj.white_rounded\r\n      );\r\n      let datab = chartList.map((query_Obj, i) =>\r\n        Math.round(query_Obj.events_per_100k)\r\n      );\r\n\r\n\r\n      let chart = [<RaceChart chartData={datab} chartLabel={labelb}/>];\r\n      \r\n      this.setState({\r\n        // chartData: datab,\r\n        // chartLabel: labelb,\r\n        chartFull: chart\r\n      });\r\n    }, err => {\r\n      // Print the error if there is one.\r\n      console.log(err);\r\n    });\r\n  }\r\n\r\n  showQueryc() {\r\n    console.log(\"C\");\r\n  }\r\n  render() {    //this can be changed completely to suit your needs\r\n    return (\r\n      <div className=\"Race\">\r\n\r\n        <PageNavbar active=\"race\" />\r\n        \r\n\r\n        <div className=\"container query-container\">\r\n            <br></br>\r\n            <div class = \"text-center\">\r\n            <h3 class=\"display-4 font-weight-bold text-white outline-this\">Does Race Affect What Equipment is Requested?</h3>\r\n          </div>\r\n            <div className= \"dropdown-container\">\r\n              <select value={this.state.selectedQuestion} onChange={this.handleChange} className=\"dropdown\" id=\"raceQueryDropdown\">\r\n                <option select value> -- Ask a Question -- </option>\r\n                <option value=\"query10a\">What are the 10 most requested items in counties where racial minorities are the majority population?</option>\r\n                <option value=\"query10b\">What are the 10 most requested items in counties where the majority of the population is white?</option>\r\n                <option value=\"query11\">In counties where racial minorities are the majority of the population, what is the average value of requested equpiment?</option>\r\n              </select>\r\n              <button className=\"submit-btn\" id=\"querySubmitBtn\" onClick={this.submitQuestion}>Ask</button>\r\n              </div>\r\n              <div class = \"text-center\">\r\n              <h3 class=\"display-4 font-weight-bold text-white outline-this\">Results</h3>\r\n          </div>\r\n         \r\n         \r\n          <div className=\"jumbotron\">\r\n            {this.state.tableATitle}\r\n            <div className=\"container query-container\">\r\n\r\n            {this.state.tableAHeader}\r\n            <div className=\"results-container\" id=\"results\">\r\n                {this.state.query}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <br></br>\r\n          \r\n        </div>\r\n        <div className=\"container query-container\">\r\n            <br></br>\r\n            <div class = \"text-center\">\r\n            <h3 class=\"display-4 font-weight-bold text-white outline-this\">Do Race Demographics Correlate With the Number of Events on average in a Given County?</h3>\r\n          </div>\r\n            <div className= \"dropdown-container\">\r\n              <select value={this.state.selectedQuery} onChange={this.handleChange2} className=\"dropdown\" id=\"raceQueryDropdown\">\r\n                <option select value> -- Ask a Question -- </option>\r\n                <option value=\"query12b\">1. In counties with a population greater than 100,000, how many events occurred, per capita?</option>\r\n                <option value=\"query13b\">2. Is there a correlation between the percent of a county's population that is white and the number of events that occurred in the same county?</option>\r\n                <option value=\"query12d\">3. How does the percentage of a large county's population that is white affect the value of requested equipment?</option>\r\n                <option value=\"query13d\">4. How does the percentage of any county's population that is white affect the value of requested equipment?</option>\r\n              </select>\r\n              <button className=\"submit-btn\" id=\"querySubmitBtn\" onClick={this.submitQuestionb}>Ask</button>\r\n              </div>\r\n              <div class = \"text-center\">\r\n              <h3 class=\"display-4 font-weight-bold text-white double-outline\">Results</h3>\r\n          </div>\r\n        </div>\r\n        <div className=\"container query-container\">\r\n          <div className=\"jumbotron\">\r\n            {this.state.chartFull}\r\n          </div>\r\n          <div className=\"jumbotron\">\r\n            {this.state.tableBTitle}\r\n            <div className=\"query-container\">\r\n              {this.state.tableBHeader}\r\n              <div className=\"results-container\" id=\"results\">\r\n                {this.state.queryb}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}